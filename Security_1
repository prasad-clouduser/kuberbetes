Security: kubeconfig 
we can also pass the client certs to the kubectl utility. 
instead of cmd keep them in the config file.

KubeConfig: 

1. contexts marry these together (clusters and users) 
We are not configuring any kind of user access or authorization in the cluster with this process. 
you are using existing users with their existing privileges and defining what user you are going to use to access what cluster. 

that way you don't have to specify the user certificates and server address in each and every kubectl command you run. 

====================================================================

Kubernetes API: 

These APIs are responsible for cluster's functionality. 

There are many like below groups /metrics, /healthz 
/api -> core grup --> all core functionality 
/apis --> named group, more organized one. All newer features are made available through these named groups. 
all newer features are going to be made available through this new group. 

Apart of curl to access kube api server, we can also use kubectl proxy client to access k8s api server. 
it launches a proxy service locally on port 8001, and uses credentials and certificates from your kube config file to acecs the cluster. 
that way you dont have specify those in curl command. 

named apis --> it has API groups --> api groups have resources. 
each resource has actions assoicated with them.

========================================================================================================================

Authorization: 

kubelet access the API server to read info about services and endpoints node and pods 
the kubelet also reports to the kube api server with the info about the node such as its status 
these rquests are handled by special authorizer called node authorizer 

kubelets should be part of systems nodes group and have name prefixed with system:node. 
so any request coming from a user with the name system node and part of the system nodes group is authorized by the node authorizer and granted these privileges

ABAC --> we create policy for each user, difficult to manage. every time we need to edit and restart kube api server. 
RBAC -> role is created -> simply modify the role, it reflects on all developers immediately. 

webhook --> manage authorization externally. not thorugh the build in mechanisms 
ex: OPA is third party tool that helps with adminision control and authorization. u can have k8s make an API call to the open policy agent with the information about the user and his access rquirements. 
OPA decides if the user should be permitted orn ot. 
Always allow and Alway deny are two more modes allowed. 

suppose;
authorization mode--> node, RBAC, WEBHOOK. 
when a user sends a request its first handled by node authorizer. the node authroizer handles only node requests. it denies the request. 
then it is forward to next one in the chain. it performs checks and grants the permissions. 

everytime a module denies request it goes to next module. 

=====================================================================================================

ClusterRoles:

resources are categorized as namespaced or cluster scoped. 
you can create a cluster role for namespaced resources as well. user will have access to these resources across all namespaces. 

======================================================================================================

Service Accounts: 

The service account token is what must be used by the external application while authenticating to the k8s api.
the token however is stored as secret object. 

1. when sa is created, it first creates the service account object. 
2. then generates the token for the service account. 
3. it then creates a token object and stores that token inside the secret object. 
4. then secret object is linked to service account. 

this token can then be used as an authentication bearer token while making a REST call to the k8s API. 

if third party app hosted in k8s itself. 
1. exporting the service account token and configuring the third party application to use it can be made simple by automatically mounting the service token secret as a volume 
inside the pod hosting third party app. 
whenever a pod is created, the default service account and its token are automatically mounted to that pod. 
u may choose not to mount a service account automatically by setting automountServiceAccountToken field. 

======================================================================================================================

Image Seccurity: 

Library is the name of the default account where docker's official images are stored. 
These images promote best practices and are maintained by a dedicated team who are responsible for reviewing and publishing these official images. 
where these images are to be pulled from? 
it is assumed to be docker's default registry, dockerhub. 
The DNS name for which is docker.io. 

google registry -> gcr.io 

within k8s, we know that the images are pulled and run by the docker runtime on the worker nodes. 
how do you pass the credentials to the docker runtimes on the worker nodes?

docker-registry is a built in secret type that was built for storing docker credentials. 
keep this in imageSecrets in pod def file, kubelet use this cred to pull the images from internal registry 

==========================================================================================================================

Security:
--------

containers and host share the same kernel. 
host has namespace and container has its own namespace. 
All the processes run by the containers are in fact run on the host itself but in their own namespace. 

As far as docker container is concerned, it is in its own namespace and it can see its own processes only. it can't see anything outside of it or in any other namespace. 

for the docker host, all processes of its own as well as those in the child namespaces are visible as just another process in the system.
when you list the processes on the host, you see list of processes including the sleep command but with a different process ID. 
This is because processes can have diff process IDs in diff namespaces. 
This is process isolation. 

Both within container and outside the container on the host, the process is run as root user. 
docker implements a set of security features that limits the abilities of root user within the container. 
root user within container is not really like the root user on the host 

you can now control and limit what cap are made available to the user.
by default, docker runs a container with a limited set of capabilities and so process running with in the container do have the privileges to say reboot the host 
or perform operations that can disrupt the host or other containers running on the same host. 

you can modify prvilges with -cap-add, -prvileges with docker run.

diff capabilities of linux: 
/usr/include/linux/capability.sh




