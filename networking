
We have two system A and B. 
how does System A reach System B. 
We connect them to a switch. 
Switch creates a network containing the two systems. 

To connect them to a switch we need an interface on each host. 
to see the interfaces on host, we use ip link command. 
we use here eth0 to connect to the switch. 

once ip address assigned to system, computers can communicate with each other through the switch. 
switch can only enable communication within network. 
which means it can receive packets from a host on the network and deliver it to the other systems within same network. 

A router helps connect two networks together. 
router - think of it as another server with many network ports. 
since it connects to the two separate networks, it gets two IPs assigned. router gets two IPs. in the first network and second network. 

To confgure a gateway on system B (which is in network 1.0)  to reach the systems on network 2.0, use the ip route add command and specificy that you can reach the 
2.0 network via thorough the door or gateway at 192.168.1.1 

Suppose system need access to the internet. 

1. You connect the router to the internet. (ip route add 172.217.194.0/24 via 192.168.2.1) 
2. Then add a new route in yur routing table to route all traffic to the network 172.217.194 through your router. 


ip route add default via 192.168.2.1
This way any request to any network outside of your existing network goes to this particular router. (instead of creatign multiple routes for various network in route table)

All you need is a single routing table entry with the default gateway set to the router's IP address.
instead of default you could also say 0.0.0.0 (any IP destination) 

0.0.0.0 field in the gateway field indicatees that you don't need a gateway, for ex; to access any device in the 192.168.2.0 network it does not need a gateway because it is
in its own network. 

two routers present? 

1. one router should be used to connect to the public networks. 
2. one router is used for connecting to the internal private network. 
Total two routes present. 

how to setup a linux host as a router? 

In linux packets are not forwarded from one interface to the next.
for example packets received on eth0 on host B are not forwared to elsewhere through eth1 
this is this way for security reason for ex: if you had eth0 connected to your private network and eth1 to a public network, we don't want anyone from public network 
to easily send msg to private network. 

ip addr command is to see the IP address assigned to those interfaces. 
ip addr add command is to set IP addresses on the interfaces. 

===========================================================================================

How system know where the router is there on the network to send the packets through?
The router is just another device on the network, there could be many other such devices. 
thats where we configure the systems with a gateway or route. 
if the network was a room, the gateway is a door to the outside world to the other networks or to the internet. 
the systeems need to know where the door is to go through that. run the route cmd to see that. 

================================================================================

DNS: 

Decided to move all the entries in /etc/hosts to single server who will manage it centrally. 
we call that as our DNS server. 

how do we point our host to DNS server?
every host has DNS resolution configuration file at /etc/resolv.conf 
you add an entry init specifying address of the DNS server. 

top level domain --> they represent the intent of the website. --> .com 

.com queries google and then google quieries www. 

=============================
NETWORK Namspaces: 

Network namespaces are used by containers like docker to implement network isolation. 
contaners are separated from underlying host using namespaces. 

we create a separate namespace for the container (for isoliation to not see any other container) 
container see only processes run by it, thinks that its on its own host. 
underlying host have visibility into all of the processes including >processes run by the container. 

our host has its own routing and ARP tables with info about the rest of the network. 
we want to seal all of those details from the container. when container is created, we create a network namespace for it, that way it has no visibility to any 
network related information on the host. 
within namespace container has its own virutal interfaces, routing and ARP tables. 

to view the interface on namespace just executte the ip netns exec red ip link ( you can understtand successfuly prevented containerr to see host interfaces with the namespaces) 

how do enable all namespaces to communicate with each other?
just like the physcal world, yu create a virtual network inside the host. 
to create a network you need a switch, to create virtual network you need a virtual switch
mutliple solutions available for this. native solutions (linux bridge ) and open V switch etc. 
We crate a interface on the host for this, which is just like other interfaces. (run ip link to see) 
think of it as interface for the host and a switch for the namespaces.
next step is to connect namespaces to this new virtual network switch. 
create two interfaces, attach one interface to red namespace (with netns command) and then other peer interface (connect to bridge network) to switch and made this as master. 
similary do the same thing for other two namespaces. 

How do we establish communication betweeen my host and these namespaces?
remember bridge switch is actually a just another network interface on the host, just assign an ip address to this interface (which acts like a switch to namespaces)

How to provide a gateway or door to the outside world from the namespace? Means how to ping other hosts (connected with LAN) from this host namespaces?

A door or gateway is a system on the local network that connects to the other network
so what is a system that has one interface on the network local to the blue namespace which 192.168.15 network and is also connected to the outside LAN network.  
our local host is the gateway that connects the two networks together ( namespaces network 192.168.15.0, we assigned IP address to v-net-0 interface which is like switch for 
namespaces which can ping each other) 
we can add a route entry in the blue namespace to say route all traffic to the 192.168.1 network through the gateway at 192.168.15.5 (v-net-0 ip address) 
because blue namespace can only reach the gateway in its local network at 192.168.15.5, we can't use other interface ip (192.168.1.2) 

user try to reach other Host, just NAT the IPs 192.168.15.5 (so that these will be replaced with its own ip addresses) so that other systems can respond back.
for this we need NAT enable on our host acting as gateway here so that it can send the msgs to the LAN in its own name with its own address.
MASCURADE all packets coming from the source network withits own IP addresse) 


=======================================================================================================================

Docker Networking: 

1. with the host network, the container is attached to the host network. There is no network isolation between the host and container.
2. if you run web app that runs on port 80 on container, without using port mapping it runs the same port 80 on the host. 
3. if you run same container again, it won't run as they use same host networking. 

bridge: 
an internal private network is created which the docker host and container attach to. 
network has address 172.17.0.0 by default and each device connecting to this network get their own internal private network address on this network. 4

after installing docker it creates network called bridge. 
but it display as docker0 in the command ip link 
port mapping creates the NAT rules for port mapping. to forward traffic from 8080 to container port 80
here also two pairs of network interfaces are created
docker0 is like switch and other interface on network namespace.

======================================================================================================================================

CNI: 

bridge program you create to attach the namespace to the network -> automated script.

suppose you want to create it for other networking type automated script
1. how do you make sure the program (like bridge) yu create will work correctly with these runtimes?
2. how do we know that container runtimes like k8s or rocket will invoke your program correctly?
3. thats where we need some standards defined. 
4. A standard that define how a program should look. How container runtime should invoke them so that everyone can adhere to a single set of standards. 
and develp solution that work across runtimes. thats where container network interface comes in. 

CNI is set of standards that define how a program should be developed to solve networking challenges in a contaienrr runtime environments. 

CNI defines some responsibilites to Containers Runtimes and Plugins. (check the list) 
As long as container runtimes and plugins adhere to these standards. they can all live together in harmony. 

Docker does not support CNI, however we can use these all plugins with some workaround. 
it supports CNM. another standard. 

How doccker creates?
1. when k8s creates docker containers, it creates them on NONE network. 
2. it then invokes the configured CNI Plugins who takes care of the rest of the configuration. 



