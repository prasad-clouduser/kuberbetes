
when u first create a deployment, it triggers a rollout. 
A new rollout creates a new deployment revision. it creates revision 1 

in future if u upgrade application, a new rollout triggered and a new deployment revision is created. revision 2 
which helps in rollback to previous state. 

Deployment strategy: 
'1. recreate strategy --> applicaation down until new version pods are up. 
 2. rolling update --> default deploymnt strategy 

you can also see the ddetails in deployment details events. 
you can also use kubectl set image command to update the deploment but the manifest file have old details, be careful when you use this in future .

how deployment upgrade under the hoods: 
1. create new deployment with five replica's 
2. which can firts creates the replica set1 automatically. 
3. it creates num of pods based on replica count. 
4. when upgrade yur app, k8s deployment object creates new replica set under the hoood and start deployment of containers there, at the same time taking down pods in old replica set follwing rolling update strategy. 
5. kubectl get replicasets. 
6. if any bad happens in our deployment, you can roll out to pervious state with undo command. 


================================================================================================================================================
Anything that is appended in the docker run command, will go into the args property.
the command field corresponds entrypoint instructions. 

=================================================================================
only specific fields can be edited with kubectl edit commands. like try to change sleep seconds command, it will create a file in /tmp directory 
we can also pass --command --args to the kubecctl run command. 

==================================================================================

imperative way: without using a configMap definition file. 
declarative way: using config map definition file.
=========================================================================

secrets are stored in etcd unencrypted. 
you can view them from etcd database. 
you can enable the encryption at rest in etcd database. there is a document available steps mentioned to be done on control plan node. 

=========================================================================================================================================================

Multi container PODs. 

Sometimes you may need two services to work togther. such as webserver and logging service. 
You need one agent instance per web server instance paired together. 
You dont want to merge and load the code of the tool services, as each of them target different functionalities. and you still like them to be developed and deployed 
separately. 
You only need two functionality to work together. 
these two can scale up and down together. 

they share the same ntwork space. which means they can refer to each other as local host. 
they have access to same storage volume. 
This way you don't have to establish volume sharing or services between pods to enable communication between them.

if any of the container is fails, the pod gets restarted. 
If any of the initContainers fail to complete, Kubernetes restarts the Pod repeatedly until the Init Container succeeds.

====================================================


