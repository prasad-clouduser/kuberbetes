
How exactly does docker stores the files of an image and a container? 

Image layer --> read only 
                only can be modified by rebuilding the image. 

container Layer: docker creates a container based off these layers and create a new writable layer on top of the image layer. 
                 used to store the data created by container such as log file written by applications, any temp files generated by container. 
                 or just any file modified by the user on that container. 
                 life as long as container is alive. 

if we change app.py in read layer, docker automatically takes the copy of this file to read write layer. Image layer shared by other runnig containers also 
All future changes happens on this copied app.py file. (in read write layer). this is called copy on write mechanism. 

to persist the container layer you need to create a docker volume. 

when docker volume is created, it creates the volume in the /var/lib/docker/volumes/
                                                                               -- data_volume   
docker run  -v data_volume:/var/lib/mysql mysql  --> creates container and mounts the data volume we created inside the container. 
all the data written by database is infact stored in the data volume created on docker.
The above is called volume mounting. 

if you mount to any /data directory in another server, this is called bind mounting. 

Two types of mounts: 
volume mount mounts the volume from volume directory. 
bind mount mounts a directory from any location on the docker host. 

storage drivers are responsible for all of this operations (maintaing layer arch. creating a writable layer, moving file across the layers to copy on write etc) 
the selection storage driver depends on underlying OS being used. 
for ex: ubunu uses AUFS, which currently unavailable on CENTOS where we need to use device mapper. 








